var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TrainRuns","category":"page"},{"location":"#[TrainRuns.jl](https://github.com/railtoolkit/TrainRuns.jl)-Documentation","page":"Home","title":"TrainRuns.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Public-Functions","page":"Home","title":"Public Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TrainRuns]\nPrivate = false","category":"page"},{"location":"#TrainRuns.Path","page":"Home","title":"TrainRuns.Path","text":"Path(file, type = :YAML)\n\nPath is a datastruture for calculation context. The function Path() will create a running path for the train. Supported formats are: railtoolkit/schema (2022.05)\n\nExample\n\njulia> my_path = Path(\"file.yaml\") # will generate a path from a YAML file.\nPath(variables)\n\n\n\n\n\n","category":"type"},{"location":"#TrainRuns.Settings","page":"Home","title":"TrainRuns.Settings","text":"Settings(file)\n\nSettings is a datastruture for calculation context. The function Settings() will create a set of settings for the train run calculation. file is optinal may be used to load settings in the YAML format.\n\nExample\n\njulia> my_settings = Settings() # will generate default settings\n# massModel, stepVariable, stepSize, approxLevel, outputDetail, outputFormat\nSettings(:mass_point, :distance, 20, 3, :running_time, :dataframe)\n\n\n\n\n\n","category":"type"},{"location":"#TrainRuns.Train","page":"Home","title":"TrainRuns.Train","text":"Train(file, type = :YAML)\n\nTrain is a datastruture for calculation context. The function Train() will create a train to use in calculations. Supported formats for the YAML files are: railtoolkit/schema (2022.05)\n\nExample\n\njulia> my_train = Train(\"file.yaml\") # will generate a train from a YAML file.\nTrain(variables)\n\n\n\n\n\n","category":"type"},{"location":"#TrainRuns.trainrun","page":"Home","title":"TrainRuns.trainrun","text":"trainrun(train::Train, path::Path, settings::Settings)\n\nCalculate the running time of a train on a path. The settings provides the choice of models for the calculation. settings can be omitted. If so, a default is used. The running time will be return in seconds.\n\nExamples\n\njulia> trainrun(train, path)[end,:t]\nxxx.xx # in seconds\n\n\n\n\n\n","category":"function"},{"location":"#Privat-Functions","page":"Home","title":"Privat Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TrainRuns]\nPublic = false","category":"page"},{"location":"#TrainRuns.SupportPoint-Tuple{}","page":"Home","title":"TrainRuns.SupportPoint","text":"a SupportPoint is the smallest element of the driving course. One step of the step approach is between two support points\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.acceleration-NTuple{4, Real}","page":"Home","title":"TrainRuns.acceleration","text":"acceleration(F_T, F_R, m_train, ξ_train)\n\nCalculate the acceleration in m/s^2 with train characteristics and forces.\n\nArguments\n\nF_T::Real: the tractive effort in N.\nF_R::Real: the resisting forces in N.\nm_train::Real: the train's mass in kg.\nξ_train::Real: the train's rotation mass factor (without unit).\n\nExamples\n\njulia> acceleration(94400.0, 1700.0, 88000.0, 1.08)\n0.9753787878787878\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addAcceleratingSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addAcceleratingSection!","text":"addAcceleratingSection!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the accelerating section and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addClearingSection!, addCruisingSection!, addDiminishingSection!, addCoastingSection!, addBrakingSection!, addHalt!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addBrakingSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addBrakingSection!","text":"addBrakingSection!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the braking section and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addClearingSection!, addAcceleratingSection!, addCruisingSection!, addDiminishingSection!, addCoastingSection!, addHalt!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addBreakFreeSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addBreakFreeSection!","text":"addBreakFreeSection!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the breakFree section and add them to drivingCourse.\n\nSee also addClearingSection!, addAcceleratingSection!, addCruisingSection!, addDiminishingSection!, addCoastingSection!, addBrakingSection!, addHalt!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\njulia> addBreakFreeSection(drivingCourse_with_starting_point, stateFlags, CSs, 1, settings_default, train_longdistance)\n(Dict[Dict{Symbol, Any}(:label => \"\", :behavior => \"breakFree\", :F_T => 300000, :R_wagons => 7309.09433933, :R_path => 0.0, :s => 0, :v => 0.0, :R_train => 9505.53877308, :R_traction => 2196.44443375, :a => 0.6143175668391081, :t => 0.0, :F_R => 9505.53877308), Dict{Symbol, Any}(:label => \"\", :behavior => \"breakFree\", :F_T => 300000.0, :R_wagons => 8848.180631278232, :R_path => 0.0, :s => 20, :v => 4.957086107136361, :R_train => 11471.657638238565, :R_traction => 2623.4770069603337, :a => 0.6101597548372565, :t => 8.069256643013498, :F_R => 11471.657638238565)], Dict{Symbol, Bool}(:previousSpeedLimitReached => 0, :speedLimitReached => 0, :brakingStartReached => 0, :resistingForceNegative => 0, :endOfCSReached => 0, :tractionDeficit => 0, :error => 0))\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addClearingSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addClearingSection!","text":"addClearingSection!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the clearing section and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addCruisingSection!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addCoastingSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addCoastingSection!","text":"addCoastingSection!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the coasting section and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addClearingSection!, addAcceleratingSection!, addCruisingSection!, addDiminishingSection!, addBrakingSection!, addHalt!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addCruisingSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train, String, Real}","page":"Home","title":"TrainRuns.addCruisingSection!","text":"addCruisingSection!(drivingCourse, stateFlags, CSs, csId, settings, train, cruisingType, s_cruising)\n\nCalculate the support points of the cruising section and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addClearingSection!, addAcceleratingSection!, addDiminishingSection!, addCoastingSection!, addBrakingSection!, addHalt!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\ncruisingType::String: the type of crusing respectively if applicable the reason why the train has to cruise\ns_cruising::Real: the planned maximum crusing distance\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addDiminishingSection!-Tuple{Vector{Dict}, Dict, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addDiminishingSection!","text":"addDiminishingSection!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the diminishing section (when using maximum tractive effort and still getting slower) and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addClearingSection!, addAcceleratingSection!, addCruisingSection!, addCoastingSection!, addBrakingSection!, addHalt!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.addHalt!-Tuple{Vector{Dict}, Vector{Dict}, Integer, Settings, Train}","page":"Home","title":"TrainRuns.addHalt!","text":"addHalt!(drivingCourse, stateFlags, CSs, csId, settings, train)\n\nCalculate the support points of the halt section and add them to drivingCourse.\n\nSee also addBreakFreeSection!, addClearingSection!, addAcceleratingSection!, addCruisingSection!, addDiminishingSection!, addCoastingSection!, addBrakingSection!.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\nstateFlags::Dict: the Dictionary containing different states for drivingCourse's values.\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\ncsId::Integer: the number of characteristic section in the Vector CSs.\nsettings::Settings: the Settings object containing settings used for calculation.\ntrain::Train: the Train object containing attributes with technical train data.\n\nExamples\n\nSee addBreakFreeSection!.\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.brakingAcceleration-Tuple{Real, Real, Real}","page":"Home","title":"TrainRuns.brakingAcceleration","text":"brakingAcceleration(v_start, v_end, s_braking)\n\nCalculate the acceleration in m/s^2 to decelerate from v_start to v_end in m/s on s_braking in m.\n\nSee also brakingDistance, brakingStartVelocity.\n\nExamples\n\njulia> brakingAcceleration(25.0, 15.0, 500)\n-0.4\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.brakingDistance-Tuple{Real, Real, Real, Integer}","page":"Home","title":"TrainRuns.brakingDistance","text":"brakingDistance(v_start, v_end, a_braking, approxLevel)\n\nCalculate the braking distance in m with velocities in m/s and acceleration in m/s^2.\n\nSee also brakingAcceleration, brakingStartVelocity.\n\nArguments\n\nv_start::Real: the velocity at the start of braking in m/s.\nv_end::Real: the target velocity at the end of braking in m/s.\na_braking::Real: the constant braking acceleration in m/s^2.\napproxLevel::Integer: the last position behind the decimal point that is not rounded\n\nExamples\n\njulia> brakingDistance(25.0, 15.0, -0.4253, 3)\n470.2563\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.brakingStartVelocity-Tuple{Real, Real, Real, Integer}","page":"Home","title":"TrainRuns.brakingStartVelocity","text":"brakingStartVelocity(v_end, a_braking, s_braking, approxLevel)\n\nCalculate the maximum velocity in m/s where the train can start to brake to reach v_end.\n\nSee also brakingAcceleration, brakingDistance.\n\nArguments\n\nv_end::Real: the target velocity at the end of braking in m/s.\na_braking::Real: the constant braking acceleration in m/s^2.\ns_braking::Real: the braking distance in m.\napproxLevel::Integer: the last position behind the decimal point that is not rounded\n\nExamples\n\njulia> brakingStartVelocity(15.0, -0.4253, 500, 3)\n25.4656\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.calculateForces!-Tuple{Dict, Vector{Dict}, Integer, String, Train, Any}","page":"Home","title":"TrainRuns.calculateForces!","text":"calculate and return tractive and resisting forces for a support point\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.calculatePathResistance-Tuple{Vector{Dict}, Integer, Real, Any, Train}","page":"Home","title":"TrainRuns.calculatePathResistance","text":"calculate and return the path resistance dependend on the trains position and mass model\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.calculateTractiveEffort-Tuple{AbstractFloat, Array}","page":"Home","title":"TrainRuns.calculateTractiveEffort","text":"calculateTractiveEffort(v, tractiveEffortVelocityPairs)\n\nCalculate the trains tractive effort with the tractiveEffortVelocityPairs dependend on the velocity v.\n\n...\n\nArguments\n\nv::AbstractFloat: the current velocity in m/s.\ntractiveEffortVelocityPairs::Array{}: the trains pairs for velocity in m/s and tractive effort in N as one array containing an array for each pair.\n\n...\n\nExamples\n\njulia> calculateTractiveEffort(20.0, [(0.0, 180000), (20.0, 100000), (40.0, 60000), (60.0, 40000), (80.0, 30000)])\n100000\n\njulia> calculateTractiveEffort(30.0, [(0.0, 180000), (20.0, 100000), (40.0, 60000), (60.0, 40000), (80.0, 30000)])\n80000\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.createDataFrame-Tuple{Vector{Dict}, Symbol, Int64}","page":"Home","title":"TrainRuns.createDataFrame","text":"createDataFrame(output_vector, outputDetail, approxLevel)\n\nCreate a DataFrame from output_vector with outputDetail and approxLevel.\n\nSee also createOutput.\n\nArguments\n\noutput_vector::Vector{Dict}: the Vector containing all data to be outputted.\noutputDetail::Symbol: the detail level the DataFrame is created for.\napproxLevel::Int: the number of digits for rounding each Number in the DataFrame.\n\nExamples\n\njulia> createDataFrame(vector_pointsOfInterest, detail_data_points, approxLevel_default)\n5×11 DataFrame\n Row │ label             driving_mode  s        v       t        a       F_T        F_R      R_path   R_traction  R_wagons\n     │ String            String        Real     Real    Real     Real    Real       Real     Real     Real        Real\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ view_point_1      accelerating   850.0   28.707   54.049   0.331  1.93049e5  36602.1     0.0      9088.56   27513.6\n   2 │ distant_signal_1  accelerating  1000.0   30.325   59.129   0.294  1.82746e5  43604.7  4344.35     9795.13   29465.2\n   3 │ main_signal_1     accelerating  2000.0   37.356   88.468   0.185  1.48352e5  60899.4  8688.69    13259.1    38951.5\n   4 │ main_signal_3     braking       9000.0   27.386  258.578  -0.375  0.0        34522.1     0.0      8537.05   25985.0\n   5 │ clearing_point_1  braking       9203.37  24.443  266.426  -0.375  0.0        30176.2     0.0      7389.44   22786.8\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.createOutput-Tuple{Settings, Vector{Dict}, Vector{NamedTuple}}","page":"Home","title":"TrainRuns.createOutput","text":"createOutput(settings, drivingCourse, pointsOfInterest)\n\nCreate output information depending on settings, drivingCourse and pointsOfInterest.\n\nSee also createOutput.\n\nArguments\n\nsettings::Settings: the Settings object containing settings for output format and detail.\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\npointsOfInterest::Vector{NamedTuple}: the Vector containing tuples for the paths' points of interest.\n\nExamples\n\njulia> createOutput(settings_poi, drivingCourse_longdistance, pointsOfInterest_pathWithSlope)\n5×11 DataFrame\n Row │ label             driving_mode  s        v       t        a       F_T        F_R      R_path   R_traction  R_wagons\n     │ String            String        Real     Real    Real     Real    Real       Real     Real     Real        Real\n─────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ view_point_1      accelerating   850.0   28.707   54.049   0.331  1.93049e5  36602.1     0.0      9088.56   27513.6\n   2 │ distant_signal_1  accelerating  1000.0   30.325   59.129   0.294  1.82746e5  43604.7  4344.35     9795.13   29465.2\n   3 │ main_signal_1     accelerating  2000.0   37.356   88.468   0.185  1.48352e5  60899.4  8688.69    13259.1    38951.5\n   4 │ main_signal_3     braking       9000.0   27.386  258.578  -0.375  0.0        34522.1     0.0      8537.05   25985.0\n   5 │ clearing_point_1  braking       9203.37  24.443  266.426  -0.375  0.0        30176.2     0.0      7389.44   22786.8\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.forceFromCoefficient-Tuple{Real, Real}","page":"Home","title":"TrainRuns.forceFromCoefficient","text":"forceFromCoefficient(f, m)\n\nCalculate the force in N with the coefficient f in ‰ and the vehicle's mass m in kg.\n\nExamples\n\njulia> forceFromCoefficient(1.5, 68000.0)\n1000.2783\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.freightWagonsResistance-Tuple{AbstractFloat, Train}","page":"Home","title":"TrainRuns.freightWagonsResistance","text":"freightWagonsResistance(v, train)\n\nCalculate the vehicle resistance in N for the freight wagons of the train dependend on the velocity v.\n\nArguments\n\nv::AbstractFloat: the current velocity in m/s.\ntrain::Train: the struct defined in types.jl containing attributes with technical data.\n\nExamples\n\njulia> freightWagonsResistance(15.0, freight_train)\n20900.732702639998\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.getLowestSpeedLimit-Tuple{Vector{Dict}, Integer, Real, Real}","page":"Home","title":"TrainRuns.getLowestSpeedLimit","text":"if the rear of the train is still located in a former characteristic section it has to be checked if its speed limit can be kept\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.getNextPointOfInterest-Tuple{Vector{NamedTuple}, Real}","page":"Home","title":"TrainRuns.getNextPointOfInterest","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.moveAStep-Tuple{Dict, Symbol, Real, Integer}","page":"Home","title":"TrainRuns.moveAStep","text":"TODO\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.passengerWagonsResistance-Tuple{AbstractFloat, Train}","page":"Home","title":"TrainRuns.passengerWagonsResistance","text":"passengerWagonsResistance(v, train)\n\nCalculate the vehicle resistance in N for the passenger wagons of the train dependend on the velocity v.\n\nArguments\n\nv::AbstractFloat: the current velocity in m/s.\ntrain::Train: the struct defined in types.jl containing attributes with technical data.\n\nExamples\n\njulia> passengerWagonsResistance(15.0, longdistance_passenger_train)\n14461.2708244928\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.recalculateLastBrakingPoint!-Tuple{Vector{Dict}, Real, Real}","page":"Home","title":"TrainRuns.recalculateLastBrakingPoint!","text":"recalculateLastBrakingPoint!(drivingCourse, s_target, v_target)\n\nRealculate the last step of the drivingCourse depending on new position and velocity.\n\nArguments\n\ndrivingCourse::Vector{Dict}: the Vector containing dictionaries for all support points.\ns_target::Real: the new positon for the last support point in m.\nv_target::Real: the new velocity for the last support point in m/s.\n\nExamples\n\njulia> recalculateLastBrakingPoint(drivingCourse_with_two_points_near_5000m, 5000.0, 23.333333333333332)\nDict{Symbol, Any}[Dict(:label => \"\", :behavior => \"braking\", :F_T => 0.0, :R_wagons => 21655.0, :R_path => 0.0, :s => 4999.999980000006, :v => 23.333333441372545, :R_train => 28640.8, :R_traction => 6985.8, :a => -0.126, :t => 235.16501930395856, :F_R => 28640.8), Dict(:label => \"\", :behavior => \"braking\", :F_T => 0.0, :R_wagons => 0.0, :R_path => 0.0, :s => 5000.0, :v => 23.333333333333332, :R_train => 0.0, :R_traction => 0.0, :a => 0.0, :t => 235.16502016110115, :F_R => 0.0)]\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.secureBrakingBehavior!-Tuple{Vector{Dict}, Real, Integer}","page":"Home","title":"TrainRuns.secureBrakingBehavior!","text":"secureBrakingBehavior!(CSs, a_braking, approxLevel)\n\nCalculate the velocities between the characterisitc sections to secure braking behavior.\n\nArguments\n\nCSs::Vector{Dict}: the Vector containing dictionaries for all characteristic sections.\na_braking::Real: the constant braking acceleration in m/s^2.\napproxLevel::Integer: the last position behind the decimal point that is not rounded.\n\nExamples\n\njulia> secureBrakingBehavior!(CSs, -0.375, 3)\nDict[Dict{Symbol, Any}(:s_entry => 0.0, :v_exit => 19.3649, :v_limit => 25.0, :r_path => 0.0, :pointsOfInterest => NamedTuple[(s = 9500.0, label = \"\")], :s_exit => 9500.0), Dict{Symbol, Any}(:s_entry => 0.0, :v_exit => 0.0, :v_limit => 25.0, :r_path => 1.0, :pointsOfInterest => NamedTuple[(s = 10000.0, label = \"\")], :s_exit => 10000.0)]\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.tractionUnitResistance-Tuple{AbstractFloat, Train}","page":"Home","title":"TrainRuns.tractionUnitResistance","text":"tractionUnitResistance(v, train)\n\nCalculate the vehicle resistance in N for the traction unit of the train dependend on the velocity v.\n\nArguments\n\nv::AbstractFloat: the current velocity in m/s.\ntrain::Train: the struct defined in types.jl containing attributes with technical data.\n\nExamples\n\njulia> tractionUnitResistance(15.0, freight_train)\n5461.127252\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δs_with_Δt-Tuple{Real, Real, Real}","page":"Home","title":"TrainRuns.Δs_with_Δt","text":"Δs_with_Δt(Δt, a_prev, v_prev)\n\nCalculate the distance step in m with the time step in s, acceleration in m/s^2 and velocity in m/s.\n\nSee also Δs_with_Δv, Δt_with_Δs, Δt_with_Δv, Δt_with_constant_v, Δv_with_Δs, Δv_with_Δt.\n\nExamples\n\njulia> Δs_with_Δt(3.0, 0.5, 25.0)\n77.25\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δs_with_Δv-Tuple{Real, Real, Real}","page":"Home","title":"TrainRuns.Δs_with_Δv","text":"Δs_with_Δv(Δv, a_prev, v_prev)\n\nCalculate the distance step in m with the velocity step in m/s, acceleration in m/s^2 and velocity in m/s.\n\nSee also Δs_with_Δt, Δt_with_Δs, Δt_with_Δv, Δt_with_constant_v, Δv_with_Δs, Δv_with_Δt.\n\nExamples\n\njulia> Δs_with_Δv(1.0, 0.5, 25.0)\n51.0\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δt_with_constant_v-Tuple{Real, Real}","page":"Home","title":"TrainRuns.Δt_with_constant_v","text":"Δt_with_constant_v(Δs, v)\n\nCalculate the time step in s with the distance step in m and constant velocity in m/s.\n\nSee also Δs_with_Δt, Δs_with_Δv, Δt_with_Δs, Δt_with_Δv, Δv_with_Δs, Δv_with_Δt.\n\nExamples\n\njulia> Δt_with_constant_v(10.0, 25.0)\n0.4\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δt_with_Δs-Tuple{Real, Real, Real}","page":"Home","title":"TrainRuns.Δt_with_Δs","text":"Δt_with_Δs(Δs, a_prev, v_prev)\n\nCalculate the time step in s with the distance step in m, acceleration in m/s^2 and velocity in m/s.\n\nSee also Δs_with_Δt, Δs_with_Δv, Δt_with_Δv, Δt_with_constant_v, Δv_with_Δs, Δv_with_Δt.\n\nExamples\n\njulia> Δt_with_Δs(10.0, 0.5, 25.0)\n0.39841267341660824\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δt_with_Δv-Tuple{Real, Real}","page":"Home","title":"TrainRuns.Δt_with_Δv","text":"Δt_with_Δv(Δv, a_prev)\n\nCalculate the time step in s with the velocity step in m/s and the acceleration in m/s^2.\n\nSee also Δs_with_Δt, Δs_with_Δv, Δt_with_Δs, Δt_with_constant_v, Δv_with_Δs, Δv_with_Δt.\n\nExamples\n\njulia> Δt_with_Δv(1.0, 0.5)\n2.0\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δv_with_Δs-Tuple{Real, Real, Real}","page":"Home","title":"TrainRuns.Δv_with_Δs","text":"Δv_with_Δs(Δs, a_prev, v_prev)\n\nCalculate the velocity step in m/s with the distance step in m, acceleration in m/s^2 and velocity in m/s.\n\nSee also Δs_with_Δt, Δs_with_Δv, Δt_with_Δs, Δt_with_Δv, Δt_with_constant_v, Δv_with_Δt.\n\nExamples\n\njulia> Δv_with_Δs(10.0, 0.5, 25.0)\n0.19920633670830412\n\n\n\n\n\n","category":"method"},{"location":"#TrainRuns.Δv_with_Δt-Tuple{Real, Real}","page":"Home","title":"TrainRuns.Δv_with_Δt","text":"Δv_with_Δt(Δt, a_prev, v_prev)\n\nCalculate the velocity step in m/s with the time step in s and acceleration in m/s^2.\n\nSee also Δs_with_Δt, Δs_with_Δv, Δt_with_Δs, Δt_with_Δv, Δt_with_constant_v, Δv_with_Δs.\n\nExamples\n\njulia> Δv_with_Δt(3.0, 0.5)\n1.5\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TrainRuns]\nOrder   = [:function, :type]","category":"page"}]
}
